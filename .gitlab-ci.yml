stages:
  - stage
  - production

variables:
  IMAGE_NAME: ${CI_REGISTRY_IMAGE}
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_DRIVER: overlay2
  FF_USE_FASTZIP: "true"
  ARTIFACT_COMPRESSION_LEVEL: "fast"
  CACHE_COMPRESSION_LEVEL: "fast"


cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .next/cache/


build-to-stage:
  stage: stage
  resource_group: stage-environment
  image: docker:20-dind
  tags:
    - production_runner
  only:
    - main
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:20-dind
      alias: docker
      command: [ "--tls=false" ]
  before_script:
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - export IMAGE_TAG=$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build
      -f Dockerfile
      --cache-from $CI_REGISTRY_IMAGE:latest
      --build-arg BACKEND_API_URL=https://test-api.yourbandy.com
      --build-arg WEBSOCKET_URL=wss://test-api.yourbandy.com
      --build-arg PORT=3001
      --tag $CI_REGISTRY_IMAGE:latest
      --tag $IMAGE_TAG .
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $IMAGE_TAG


deploy-to-stage:
  stage: stage
  only:
    - main
  resource_group: stage-environment
  image: curlimages/curl:7.78.0
  needs: ["build-to-stage"]
  tags:
    - production_runner
  script:
    - curl -X POST ${WEB_STAGE_DEPLOY_KEY}


build-to-production:
  stage: production
  resource_group: production-environment
  image: docker:20-dind
  tags:
    - production_runner
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:20-dind
      alias: docker
      command: [ "--tls=false" ]
  before_script:
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - export IMAGE_TAG=$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build
      -f Dockerfile
      --cache-from $CI_REGISTRY_IMAGE:latest
      --build-arg BACKEND_API_URL=https://api.yourbandy.com
      --build-arg WEBSOCKET_URL=wss://api.yourbandy.com
      --build-arg PORT=3000
      --build-arg GA_TRACKING_ID=G-7GFK9BJNQV
      --tag $CI_REGISTRY_IMAGE:latest
      --tag $IMAGE_TAG .
    - docker push $IMAGE_TAG
  only:
    - tags

deploy-to-production:
  stage: production
  only:
    - tags
  resource_group: production-environment
  needs: ["build-to-production"]
  tags:
    - production_runner
  before_script:
    - apk add --no-cache curl jq bash
  script:
    - |
      NEW_IMAGE_TAG="${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"

      TOKEN_RESPONSE=$(curl -s -X POST "${PORTAINER_URL}/auth" -H "Content-Type: application/json" -d '{"Username": "'${PORTAINER_USERNAME}'", "Password": "'${PORTAINER_PASSWORD}'"}')
      TOKEN=$(echo $TOKEN_RESPONSE | grep -o '"jwt":"[^"]*' | cut -d'"' -f4)

      CURRENT_STACK_DEFINITION=$(curl -s -X GET "${PORTAINER_URL}/stacks/${PORTAINER_STACK_ID}/file" -H "Authorization: Bearer $TOKEN" | jq -r '.StackFileContent')

      UPDATED_STACK_DEFINITION=$(echo "$CURRENT_STACK_DEFINITION" | sed "s|${CI_REGISTRY_IMAGE}:[a-zA-Z0-9.-]*|$NEW_IMAGE_TAG|")
      decoded_json=$(echo "${ENV_VARS}" | tr -d "'" | base64 -d)
      json_payload=$(jq -n \
        --argjson env "$decoded_json" \
        --arg stackFileContent "$UPDATED_STACK_DEFINITION" \
        --argjson prune false \
        --argjson pullImage true \
        --arg id "${PORTAINER_STACK_ID}" \
        '{id: $id, StackFileContent: $stackFileContent, Env: $env, Prune: $prune, PullImage: $pullImage}')

      curl -s -X PUT "${PORTAINER_URL}/stacks/${PORTAINER_STACK_ID}?endpointId=${PORTAINER_ENDPOINT_ID}" \
          -H "Authorization: Bearer $TOKEN" \
          -H "Content-Type: application/json" \
          -d "$json_payload"